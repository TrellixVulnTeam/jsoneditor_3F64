{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction NgxJsonViewerComponent_section_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 9);\n  }\n}\n\nfunction NgxJsonViewerComponent_section_1_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const segment_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(segment_r1.description);\n  }\n}\n\nfunction NgxJsonViewerComponent_section_1_section_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"section\", 11);\n    i0.ɵɵelement(1, \"ngx-json-viewer\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const segment_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"json\", segment_r1.value)(\"expanded\", ctx_r4.expanded)(\"depth\", ctx_r4.depth)(\"_currentDepth\", ctx_r4._currentDepth);\n  }\n}\n\nconst _c0 = function (a1) {\n  return [\"segment\", a1];\n};\n\nconst _c1 = function (a1, a2) {\n  return {\n    \"segment-main\": true,\n    \"expandable\": a1,\n    \"expanded\": a2\n  };\n};\n\nfunction NgxJsonViewerComponent_section_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"section\", 2)(1, \"section\", 3);\n    i0.ɵɵlistener(\"click\", function NgxJsonViewerComponent_section_1_Template_section_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const segment_r1 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.toggle(segment_r1);\n    });\n    i0.ɵɵtemplate(2, NgxJsonViewerComponent_section_1_div_2_Template, 1, 0, \"div\", 4);\n    i0.ɵɵelementStart(3, \"span\", 5);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 6);\n    i0.ɵɵtext(6, \": \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, NgxJsonViewerComponent_section_1_span_7_Template, 2, 1, \"span\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, NgxJsonViewerComponent_section_1_section_8_Template, 2, 4, \"section\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const segment_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c0, \"segment-type-\" + segment_r1.type));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(8, _c1, ctx_r0.isExpandable(segment_r1), segment_r1.expanded));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isExpandable(segment_r1));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(segment_r1.key);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !segment_r1.expanded || !ctx_r0.isExpandable(segment_r1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", segment_r1.expanded && ctx_r0.isExpandable(segment_r1));\n  }\n}\n\nclass NgxJsonViewerComponent {\n  constructor() {\n    this.expanded = true;\n    this.depth = -1;\n    this._currentDepth = -1;\n    this.segments = [];\n  }\n\n  ngOnChanges() {\n    this.segments = []; // remove cycles\n\n    this.json = this.decycle(this.json);\n    this._currentDepth++;\n\n    if (typeof this.json === 'object') {\n      Object.keys(this.json).forEach(key => {\n        this.segments.push(this.parseKeyValue(key, this.json[key]));\n      });\n    } else {\n      this.segments.push(this.parseKeyValue(`(${typeof this.json})`, this.json));\n    }\n  }\n\n  isExpandable(segment) {\n    return segment.type === 'object' || segment.type === 'array';\n  }\n\n  toggle(segment) {\n    if (this.isExpandable(segment)) {\n      segment.expanded = !segment.expanded;\n    }\n  }\n\n  parseKeyValue(key, value) {\n    const segment = {\n      key: key,\n      value: value,\n      type: undefined,\n      description: '' + value,\n      expanded: this.isExpanded()\n    };\n\n    switch (typeof segment.value) {\n      case 'number':\n        {\n          segment.type = 'number';\n          break;\n        }\n\n      case 'boolean':\n        {\n          segment.type = 'boolean';\n          break;\n        }\n\n      case 'function':\n        {\n          segment.type = 'function';\n          break;\n        }\n\n      case 'string':\n        {\n          segment.type = 'string';\n          segment.description = '\"' + segment.value + '\"';\n          break;\n        }\n\n      case 'undefined':\n        {\n          segment.type = 'undefined';\n          segment.description = 'undefined';\n          break;\n        }\n\n      case 'object':\n        {\n          // yea, null is object\n          if (segment.value === null) {\n            segment.type = 'null';\n            segment.description = 'null';\n          } else if (Array.isArray(segment.value)) {\n            segment.type = 'array';\n            segment.description = 'Array[' + segment.value.length + '] ' + JSON.stringify(segment.value);\n          } else if (segment.value instanceof Date) {\n            segment.type = 'date';\n          } else {\n            segment.type = 'object';\n            segment.description = 'Object ' + JSON.stringify(segment.value);\n          }\n\n          break;\n        }\n    }\n\n    return segment;\n  }\n\n  isExpanded() {\n    return this.expanded && !(this.depth > -1 && this._currentDepth >= this.depth);\n  } // https://github.com/douglascrockford/JSON-js/blob/master/cycle.js\n\n\n  decycle(object) {\n    const objects = new WeakMap();\n    return function derez(value, path) {\n      let old_path;\n      let nu;\n\n      if (typeof value === 'object' && value !== null && !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof String)) {\n        old_path = objects.get(value);\n\n        if (old_path !== undefined) {\n          return {\n            $ref: old_path\n          };\n        }\n\n        objects.set(value, path);\n\n        if (Array.isArray(value)) {\n          nu = [];\n          value.forEach(function (element, i) {\n            nu[i] = derez(element, path + '[' + i + ']');\n          });\n        } else {\n          nu = {};\n          Object.keys(value).forEach(function (name) {\n            nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');\n          });\n        }\n\n        return nu;\n      }\n\n      return value;\n    }(object, '$');\n  }\n\n}\n\nNgxJsonViewerComponent.ɵfac = function NgxJsonViewerComponent_Factory(t) {\n  return new (t || NgxJsonViewerComponent)();\n};\n\nNgxJsonViewerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxJsonViewerComponent,\n  selectors: [[\"ngx-json-viewer\"]],\n  inputs: {\n    json: \"json\",\n    expanded: \"expanded\",\n    depth: \"depth\",\n    _currentDepth: \"_currentDepth\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"ngx-json-viewer\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"], [3, \"ngClass\", \"click\"], [\"class\", \"toggler\", 4, \"ngIf\"], [1, \"segment-key\"], [1, \"segment-separator\"], [\"class\", \"segment-value\", 4, \"ngIf\"], [\"class\", \"children\", 4, \"ngIf\"], [1, \"toggler\"], [1, \"segment-value\"], [1, \"children\"], [3, \"json\", \"expanded\", \"depth\", \"_currentDepth\"]],\n  template: function NgxJsonViewerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0);\n      i0.ɵɵtemplate(1, NgxJsonViewerComponent_section_1_Template, 9, 11, \"section\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.segments);\n    }\n  },\n  directives: [NgxJsonViewerComponent, i1.NgForOf, i1.NgClass, i1.NgIf],\n  styles: [\"@charset \\\"UTF-8\\\";.ngx-json-viewer[_ngcontent-%COMP%]{font-family:monospace;font-size:1em;width:100%;height:100%;overflow:hidden;position:relative}.ngx-json-viewer[_ngcontent-%COMP%]   .segment[_ngcontent-%COMP%]{padding:2px;margin:1px 1px 1px 12px}.ngx-json-viewer[_ngcontent-%COMP%]   .segment[_ngcontent-%COMP%]   .segment-main[_ngcontent-%COMP%]{word-wrap:break-word}.ngx-json-viewer[_ngcontent-%COMP%]   .segment[_ngcontent-%COMP%]   .segment-main[_ngcontent-%COMP%]   .toggler[_ngcontent-%COMP%]{position:absolute;margin-left:-14px;margin-top:3px;font-size:.8em;line-height:1.2em;vertical-align:middle;color:#787878}.ngx-json-viewer[_ngcontent-%COMP%]   .segment[_ngcontent-%COMP%]   .segment-main[_ngcontent-%COMP%]   .toggler[_ngcontent-%COMP%]:after{display:inline-block;content:\\\"\\\\25ba\\\";transition:transform .1s ease-in}.ngx-json-viewer[_ngcontent-%COMP%]   .segment[_ngcontent-%COMP%]   .segment-main[_ngcontent-%COMP%]   .segment-key[_ngcontent-%COMP%]{color:#4e187c}.ngx-json-viewer[_ngcontent-%COMP%]   .segment[_ngcontent-%COMP%]   .segment-main[_ngcontent-%COMP%]   .segment-separator[_ngcontent-%COMP%]{color:#999}.ngx-json-viewer[_ngcontent-%COMP%]   .segment[_ngcontent-%COMP%]   .segment-main[_ngcontent-%COMP%]   .segment-value[_ngcontent-%COMP%]{color:#000}.ngx-json-viewer[_ngcontent-%COMP%]   .segment[_ngcontent-%COMP%]   .children[_ngcontent-%COMP%]{margin-left:12px}.ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-string[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%] > .segment-value[_ngcontent-%COMP%]{color:#ff6b6b}.ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-number[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%] > .segment-value[_ngcontent-%COMP%]{color:#009688}.ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-boolean[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%] > .segment-value[_ngcontent-%COMP%]{color:#b938a4}.ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-date[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%] > .segment-value[_ngcontent-%COMP%]{color:#05668d}.ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-array[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%] > .segment-value[_ngcontent-%COMP%]{color:#999}.ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-object[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%] > .segment-value[_ngcontent-%COMP%]{color:#999}.ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-function[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%] > .segment-value[_ngcontent-%COMP%]{color:#999}.ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-null[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%] > .segment-value[_ngcontent-%COMP%]{color:#fff}.ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-undefined[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%] > .segment-value[_ngcontent-%COMP%]{color:#fff}.ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-null[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%] > .segment-value[_ngcontent-%COMP%]{background-color:red}.ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-undefined[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%] > .segment-key[_ngcontent-%COMP%]{color:#999}.ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-undefined[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%] > .segment-value[_ngcontent-%COMP%]{background-color:#999}.ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-object[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%], .ngx-json-viewer[_ngcontent-%COMP%]   .segment-type-array[_ngcontent-%COMP%] > .segment-main[_ngcontent-%COMP%]{white-space:nowrap}.ngx-json-viewer[_ngcontent-%COMP%]   .expanded[_ngcontent-%COMP%] > .toggler[_ngcontent-%COMP%]:after{transform:rotate(90deg)}.ngx-json-viewer[_ngcontent-%COMP%]   .expandable[_ngcontent-%COMP%], .ngx-json-viewer[_ngcontent-%COMP%]   .expandable[_ngcontent-%COMP%] > .toggler[_ngcontent-%COMP%]{cursor:pointer}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxJsonViewerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-json-viewer',\n      template: \"<section class=\\\"ngx-json-viewer\\\">\\n  <section\\n    *ngFor=\\\"let segment of segments\\\"\\n    [ngClass]=\\\"['segment', 'segment-type-' + segment.type]\\\">\\n    <section\\n      (click)=\\\"toggle(segment)\\\"\\n      [ngClass]=\\\"{\\n        'segment-main': true,\\n        'expandable': isExpandable(segment),\\n        'expanded': segment.expanded\\n      }\\\">\\n      <div *ngIf=\\\"isExpandable(segment)\\\" class=\\\"toggler\\\"></div>\\n      <span class=\\\"segment-key\\\">{{ segment.key }}</span>\\n      <span class=\\\"segment-separator\\\">: </span>\\n      <span *ngIf=\\\"!segment.expanded || !isExpandable(segment)\\\" class=\\\"segment-value\\\">{{ segment.description }}</span>\\n    </section>\\n    <section *ngIf=\\\"segment.expanded && isExpandable(segment)\\\" class=\\\"children\\\">\\n      <ngx-json-viewer [json]=\\\"segment.value\\\" [expanded]=\\\"expanded\\\" [depth]=\\\"depth\\\" [_currentDepth]=\\\"_currentDepth\\\"></ngx-json-viewer>\\n    </section>\\n  </section>\\n</section>\\n\",\n      styles: [\"@charset \\\"UTF-8\\\";.ngx-json-viewer{font-family:monospace;font-size:1em;width:100%;height:100%;overflow:hidden;position:relative}.ngx-json-viewer .segment{padding:2px;margin:1px 1px 1px 12px}.ngx-json-viewer .segment .segment-main{word-wrap:break-word}.ngx-json-viewer .segment .segment-main .toggler{position:absolute;margin-left:-14px;margin-top:3px;font-size:.8em;line-height:1.2em;vertical-align:middle;color:#787878}.ngx-json-viewer .segment .segment-main .toggler:after{display:inline-block;content:\\\"\\\\25ba\\\";transition:transform .1s ease-in}.ngx-json-viewer .segment .segment-main .segment-key{color:#4e187c}.ngx-json-viewer .segment .segment-main .segment-separator{color:#999}.ngx-json-viewer .segment .segment-main .segment-value{color:#000}.ngx-json-viewer .segment .children{margin-left:12px}.ngx-json-viewer .segment-type-string>.segment-main>.segment-value{color:#ff6b6b}.ngx-json-viewer .segment-type-number>.segment-main>.segment-value{color:#009688}.ngx-json-viewer .segment-type-boolean>.segment-main>.segment-value{color:#b938a4}.ngx-json-viewer .segment-type-date>.segment-main>.segment-value{color:#05668d}.ngx-json-viewer .segment-type-array>.segment-main>.segment-value{color:#999}.ngx-json-viewer .segment-type-object>.segment-main>.segment-value{color:#999}.ngx-json-viewer .segment-type-function>.segment-main>.segment-value{color:#999}.ngx-json-viewer .segment-type-null>.segment-main>.segment-value{color:#fff}.ngx-json-viewer .segment-type-undefined>.segment-main>.segment-value{color:#fff}.ngx-json-viewer .segment-type-null>.segment-main>.segment-value{background-color:red}.ngx-json-viewer .segment-type-undefined>.segment-main>.segment-key{color:#999}.ngx-json-viewer .segment-type-undefined>.segment-main>.segment-value{background-color:#999}.ngx-json-viewer .segment-type-object>.segment-main,.ngx-json-viewer .segment-type-array>.segment-main{white-space:nowrap}.ngx-json-viewer .expanded>.toggler:after{transform:rotate(90deg)}.ngx-json-viewer .expandable,.ngx-json-viewer .expandable>.toggler{cursor:pointer}\\n\"]\n    }]\n  }], null, {\n    json: [{\n      type: Input\n    }],\n    expanded: [{\n      type: Input\n    }],\n    depth: [{\n      type: Input\n    }],\n    _currentDepth: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NgxJsonViewerModule {}\n\nNgxJsonViewerModule.ɵfac = function NgxJsonViewerModule_Factory(t) {\n  return new (t || NgxJsonViewerModule)();\n};\n\nNgxJsonViewerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxJsonViewerModule\n});\nNgxJsonViewerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxJsonViewerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxJsonViewerComponent],\n      exports: [NgxJsonViewerComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgxJsonViewerComponent, NgxJsonViewerModule };","map":{"version":3,"sources":["/Users/abhikray/jsonTalkSoft/frontend/node_modules/ngx-json-viewer/fesm2015/ngx-json-viewer.mjs"],"names":["i0","Component","Input","NgModule","i1","CommonModule","NgxJsonViewerComponent","constructor","expanded","depth","_currentDepth","segments","ngOnChanges","json","decycle","Object","keys","forEach","key","push","parseKeyValue","isExpandable","segment","type","toggle","value","undefined","description","isExpanded","Array","isArray","length","JSON","stringify","Date","object","objects","WeakMap","derez","path","old_path","nu","Boolean","Number","RegExp","String","get","$ref","set","element","i","name","ɵfac","ɵcmp","NgForOf","NgClass","NgIf","args","selector","template","styles","NgxJsonViewerModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass NgxJsonViewerComponent {\n    constructor() {\n        this.expanded = true;\n        this.depth = -1;\n        this._currentDepth = -1;\n        this.segments = [];\n    }\n    ngOnChanges() {\n        this.segments = [];\n        // remove cycles\n        this.json = this.decycle(this.json);\n        this._currentDepth++;\n        if (typeof this.json === 'object') {\n            Object.keys(this.json).forEach(key => {\n                this.segments.push(this.parseKeyValue(key, this.json[key]));\n            });\n        }\n        else {\n            this.segments.push(this.parseKeyValue(`(${typeof this.json})`, this.json));\n        }\n    }\n    isExpandable(segment) {\n        return segment.type === 'object' || segment.type === 'array';\n    }\n    toggle(segment) {\n        if (this.isExpandable(segment)) {\n            segment.expanded = !segment.expanded;\n        }\n    }\n    parseKeyValue(key, value) {\n        const segment = {\n            key: key,\n            value: value,\n            type: undefined,\n            description: '' + value,\n            expanded: this.isExpanded()\n        };\n        switch (typeof segment.value) {\n            case 'number': {\n                segment.type = 'number';\n                break;\n            }\n            case 'boolean': {\n                segment.type = 'boolean';\n                break;\n            }\n            case 'function': {\n                segment.type = 'function';\n                break;\n            }\n            case 'string': {\n                segment.type = 'string';\n                segment.description = '\"' + segment.value + '\"';\n                break;\n            }\n            case 'undefined': {\n                segment.type = 'undefined';\n                segment.description = 'undefined';\n                break;\n            }\n            case 'object': {\n                // yea, null is object\n                if (segment.value === null) {\n                    segment.type = 'null';\n                    segment.description = 'null';\n                }\n                else if (Array.isArray(segment.value)) {\n                    segment.type = 'array';\n                    segment.description = 'Array[' + segment.value.length + '] ' + JSON.stringify(segment.value);\n                }\n                else if (segment.value instanceof Date) {\n                    segment.type = 'date';\n                }\n                else {\n                    segment.type = 'object';\n                    segment.description = 'Object ' + JSON.stringify(segment.value);\n                }\n                break;\n            }\n        }\n        return segment;\n    }\n    isExpanded() {\n        return (this.expanded &&\n            !(this.depth > -1 && this._currentDepth >= this.depth));\n    }\n    // https://github.com/douglascrockford/JSON-js/blob/master/cycle.js\n    decycle(object) {\n        const objects = new WeakMap();\n        return (function derez(value, path) {\n            let old_path;\n            let nu;\n            if (typeof value === 'object'\n                && value !== null\n                && !(value instanceof Boolean)\n                && !(value instanceof Date)\n                && !(value instanceof Number)\n                && !(value instanceof RegExp)\n                && !(value instanceof String)) {\n                old_path = objects.get(value);\n                if (old_path !== undefined) {\n                    return { $ref: old_path };\n                }\n                objects.set(value, path);\n                if (Array.isArray(value)) {\n                    nu = [];\n                    value.forEach(function (element, i) {\n                        nu[i] = derez(element, path + '[' + i + ']');\n                    });\n                }\n                else {\n                    nu = {};\n                    Object.keys(value).forEach(function (name) {\n                        nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');\n                    });\n                }\n                return nu;\n            }\n            return value;\n        }(object, '$'));\n    }\n}\nNgxJsonViewerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.2\", ngImport: i0, type: NgxJsonViewerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nNgxJsonViewerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.2\", type: NgxJsonViewerComponent, selector: \"ngx-json-viewer\", inputs: { json: \"json\", expanded: \"expanded\", depth: \"depth\", _currentDepth: \"_currentDepth\" }, usesOnChanges: true, ngImport: i0, template: \"<section class=\\\"ngx-json-viewer\\\">\\n  <section\\n    *ngFor=\\\"let segment of segments\\\"\\n    [ngClass]=\\\"['segment', 'segment-type-' + segment.type]\\\">\\n    <section\\n      (click)=\\\"toggle(segment)\\\"\\n      [ngClass]=\\\"{\\n        'segment-main': true,\\n        'expandable': isExpandable(segment),\\n        'expanded': segment.expanded\\n      }\\\">\\n      <div *ngIf=\\\"isExpandable(segment)\\\" class=\\\"toggler\\\"></div>\\n      <span class=\\\"segment-key\\\">{{ segment.key }}</span>\\n      <span class=\\\"segment-separator\\\">: </span>\\n      <span *ngIf=\\\"!segment.expanded || !isExpandable(segment)\\\" class=\\\"segment-value\\\">{{ segment.description }}</span>\\n    </section>\\n    <section *ngIf=\\\"segment.expanded && isExpandable(segment)\\\" class=\\\"children\\\">\\n      <ngx-json-viewer [json]=\\\"segment.value\\\" [expanded]=\\\"expanded\\\" [depth]=\\\"depth\\\" [_currentDepth]=\\\"_currentDepth\\\"></ngx-json-viewer>\\n    </section>\\n  </section>\\n</section>\\n\", styles: [\"@charset \\\"UTF-8\\\";.ngx-json-viewer{font-family:monospace;font-size:1em;width:100%;height:100%;overflow:hidden;position:relative}.ngx-json-viewer .segment{padding:2px;margin:1px 1px 1px 12px}.ngx-json-viewer .segment .segment-main{word-wrap:break-word}.ngx-json-viewer .segment .segment-main .toggler{position:absolute;margin-left:-14px;margin-top:3px;font-size:.8em;line-height:1.2em;vertical-align:middle;color:#787878}.ngx-json-viewer .segment .segment-main .toggler:after{display:inline-block;content:\\\"\\\\25ba\\\";transition:transform .1s ease-in}.ngx-json-viewer .segment .segment-main .segment-key{color:#4e187c}.ngx-json-viewer .segment .segment-main .segment-separator{color:#999}.ngx-json-viewer .segment .segment-main .segment-value{color:#000}.ngx-json-viewer .segment .children{margin-left:12px}.ngx-json-viewer .segment-type-string>.segment-main>.segment-value{color:#ff6b6b}.ngx-json-viewer .segment-type-number>.segment-main>.segment-value{color:#009688}.ngx-json-viewer .segment-type-boolean>.segment-main>.segment-value{color:#b938a4}.ngx-json-viewer .segment-type-date>.segment-main>.segment-value{color:#05668d}.ngx-json-viewer .segment-type-array>.segment-main>.segment-value{color:#999}.ngx-json-viewer .segment-type-object>.segment-main>.segment-value{color:#999}.ngx-json-viewer .segment-type-function>.segment-main>.segment-value{color:#999}.ngx-json-viewer .segment-type-null>.segment-main>.segment-value{color:#fff}.ngx-json-viewer .segment-type-undefined>.segment-main>.segment-value{color:#fff}.ngx-json-viewer .segment-type-null>.segment-main>.segment-value{background-color:red}.ngx-json-viewer .segment-type-undefined>.segment-main>.segment-key{color:#999}.ngx-json-viewer .segment-type-undefined>.segment-main>.segment-value{background-color:#999}.ngx-json-viewer .segment-type-object>.segment-main,.ngx-json-viewer .segment-type-array>.segment-main{white-space:nowrap}.ngx-json-viewer .expanded>.toggler:after{transform:rotate(90deg)}.ngx-json-viewer .expandable,.ngx-json-viewer .expandable>.toggler{cursor:pointer}\\n\"], components: [{ type: NgxJsonViewerComponent, selector: \"ngx-json-viewer\", inputs: [\"json\", \"expanded\", \"depth\", \"_currentDepth\"] }], directives: [{ type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.2\", ngImport: i0, type: NgxJsonViewerComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-json-viewer', template: \"<section class=\\\"ngx-json-viewer\\\">\\n  <section\\n    *ngFor=\\\"let segment of segments\\\"\\n    [ngClass]=\\\"['segment', 'segment-type-' + segment.type]\\\">\\n    <section\\n      (click)=\\\"toggle(segment)\\\"\\n      [ngClass]=\\\"{\\n        'segment-main': true,\\n        'expandable': isExpandable(segment),\\n        'expanded': segment.expanded\\n      }\\\">\\n      <div *ngIf=\\\"isExpandable(segment)\\\" class=\\\"toggler\\\"></div>\\n      <span class=\\\"segment-key\\\">{{ segment.key }}</span>\\n      <span class=\\\"segment-separator\\\">: </span>\\n      <span *ngIf=\\\"!segment.expanded || !isExpandable(segment)\\\" class=\\\"segment-value\\\">{{ segment.description }}</span>\\n    </section>\\n    <section *ngIf=\\\"segment.expanded && isExpandable(segment)\\\" class=\\\"children\\\">\\n      <ngx-json-viewer [json]=\\\"segment.value\\\" [expanded]=\\\"expanded\\\" [depth]=\\\"depth\\\" [_currentDepth]=\\\"_currentDepth\\\"></ngx-json-viewer>\\n    </section>\\n  </section>\\n</section>\\n\", styles: [\"@charset \\\"UTF-8\\\";.ngx-json-viewer{font-family:monospace;font-size:1em;width:100%;height:100%;overflow:hidden;position:relative}.ngx-json-viewer .segment{padding:2px;margin:1px 1px 1px 12px}.ngx-json-viewer .segment .segment-main{word-wrap:break-word}.ngx-json-viewer .segment .segment-main .toggler{position:absolute;margin-left:-14px;margin-top:3px;font-size:.8em;line-height:1.2em;vertical-align:middle;color:#787878}.ngx-json-viewer .segment .segment-main .toggler:after{display:inline-block;content:\\\"\\\\25ba\\\";transition:transform .1s ease-in}.ngx-json-viewer .segment .segment-main .segment-key{color:#4e187c}.ngx-json-viewer .segment .segment-main .segment-separator{color:#999}.ngx-json-viewer .segment .segment-main .segment-value{color:#000}.ngx-json-viewer .segment .children{margin-left:12px}.ngx-json-viewer .segment-type-string>.segment-main>.segment-value{color:#ff6b6b}.ngx-json-viewer .segment-type-number>.segment-main>.segment-value{color:#009688}.ngx-json-viewer .segment-type-boolean>.segment-main>.segment-value{color:#b938a4}.ngx-json-viewer .segment-type-date>.segment-main>.segment-value{color:#05668d}.ngx-json-viewer .segment-type-array>.segment-main>.segment-value{color:#999}.ngx-json-viewer .segment-type-object>.segment-main>.segment-value{color:#999}.ngx-json-viewer .segment-type-function>.segment-main>.segment-value{color:#999}.ngx-json-viewer .segment-type-null>.segment-main>.segment-value{color:#fff}.ngx-json-viewer .segment-type-undefined>.segment-main>.segment-value{color:#fff}.ngx-json-viewer .segment-type-null>.segment-main>.segment-value{background-color:red}.ngx-json-viewer .segment-type-undefined>.segment-main>.segment-key{color:#999}.ngx-json-viewer .segment-type-undefined>.segment-main>.segment-value{background-color:#999}.ngx-json-viewer .segment-type-object>.segment-main,.ngx-json-viewer .segment-type-array>.segment-main{white-space:nowrap}.ngx-json-viewer .expanded>.toggler:after{transform:rotate(90deg)}.ngx-json-viewer .expandable,.ngx-json-viewer .expandable>.toggler{cursor:pointer}\\n\"] }]\n        }], propDecorators: { json: [{\n                type: Input\n            }], expanded: [{\n                type: Input\n            }], depth: [{\n                type: Input\n            }], _currentDepth: [{\n                type: Input\n            }] } });\n\nclass NgxJsonViewerModule {\n}\nNgxJsonViewerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.2\", ngImport: i0, type: NgxJsonViewerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxJsonViewerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.2\", ngImport: i0, type: NgxJsonViewerModule, declarations: [NgxJsonViewerComponent], imports: [CommonModule], exports: [NgxJsonViewerComponent] });\nNgxJsonViewerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.2\", ngImport: i0, type: NgxJsonViewerModule, imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.2\", ngImport: i0, type: NgxJsonViewerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    declarations: [\n                        NgxJsonViewerComponent\n                    ],\n                    exports: [\n                        NgxJsonViewerComponent\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxJsonViewerComponent, NgxJsonViewerModule };\n"]},"metadata":{},"sourceType":"module"}